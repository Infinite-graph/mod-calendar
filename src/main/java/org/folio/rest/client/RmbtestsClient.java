
package org.folio.rest.client;

import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.net.URLEncoder;
import io.vertx.core.Handler;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.http.HttpClient;
import io.vertx.core.http.HttpClientOptions;
import io.vertx.core.http.HttpClientResponse;
import org.folio.rest.tools.utils.VertxUtils;


/**
 * Auto-generated code - based on class org.folio.rest.jaxrs.resource.RmbtestsResource
 * 
 */
public class RmbtestsClient {

    private final static String GLOBAL_PATH = "/rmbtests";
    private String tenantId;
    private String token;
    private HttpClientOptions options;
    private HttpClient httpClient;

    public RmbtestsClient(String host, int port, String tenantId, String token, boolean keepAlive, int connTO, int idleTO) {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.RmbtestsResource
        this.tenantId = tenantId;
        this.token = token;
        options = new HttpClientOptions();
        options.setLogActivity(true);
        options.setKeepAlive(keepAlive);
        options.setDefaultHost(host);
        options.setDefaultPort(port);
        options.setConnectTimeout(connTO);
        options.setIdleTimeout(idleTO);
        httpClient = VertxUtils.getVertxFromContextOrNew().createHttpClient(options);
    }

    public RmbtestsClient(String host, int port, String tenantId, String token) {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.RmbtestsResource
        this(host, port, tenantId, token, true, 2000, 5000);
    }

    public RmbtestsClient(String host, int port, String tenantId, String token, boolean keepAlive) {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.RmbtestsResource
        this(host, port, tenantId, token, keepAlive, 2000, 5000);
    }

    /**
     * Convenience constructor for tests ONLY!<br>Connect to localhost on 8081 as folio_demo tenant.
     * 
     */
    public RmbtestsClient() {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.RmbtestsResource
        this("localhost", 8081, "folio_demo", "folio_demo", false, 2000, 5000);
    }

    /**
     * Service endpoint "/rmbtests/books"+queryParams.toString()
     * 
     */
    public void putBooks(BigDecimal access_token, Handler<HttpClientResponse> responseHandler) {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.RmbtestsResource
        StringBuilder queryParams = new StringBuilder("?");
        if (access_token!= null) {
            queryParams.append("access_token=");
            queryParams.append(access_token);
            queryParams.append("&");
        }
        io.vertx.core.http.HttpClientRequest request = httpClient.put("/rmbtests/books"+queryParams.toString());
        request.handler(responseHandler);
        if (tenantId!= null) {
            request.putHeader("X-Okapi-Token", token);
            request.putHeader("x-okapi-tenant", tenantId);
        }
        request.end();
    }

    /**
     * Service endpoint "/rmbtests/books"+queryParams.toString()
     * 
     */
    public void getBooks(String author, BigDecimal publicationYear, BigDecimal rating, String isbn, String[] facets, Handler<HttpClientResponse> responseHandler)
        throws UnsupportedEncodingException
    {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.RmbtestsResource
        StringBuilder queryParams = new StringBuilder("?");
        if (author!= null) {
            queryParams.append("author=");
            queryParams.append(URLEncoder.encode(author, "UTF-8"));
            queryParams.append("&");
        }
        if (publicationYear!= null) {
            queryParams.append("publicationYear=");
            queryParams.append(publicationYear);
            queryParams.append("&");
        }
        if (rating!= null) {
            queryParams.append("rating=");
            queryParams.append(rating);
            queryParams.append("&");
        }
        if (isbn!= null) {
            queryParams.append("isbn=");
            queryParams.append(URLEncoder.encode(isbn, "UTF-8"));
            queryParams.append("&");
        }
        if (facets!= null) {
            queryParams.append("facets=");
            if(facets.getClass().isArray()){queryParams.append(String.join("&facets=",facets));}
            queryParams.append("&");
        }
        io.vertx.core.http.HttpClientRequest request = httpClient.get("/rmbtests/books"+queryParams.toString());
        request.handler(responseHandler);
        request.putHeader("Accept", "application/json");
        if (tenantId!= null) {
            request.putHeader("X-Okapi-Token", token);
            request.putHeader("x-okapi-tenant", tenantId);
        }
        request.end();
    }

    /**
     * Service endpoint "/rmbtests/test"+queryParams.toString()
     * 
     */
    public void postTest(Reader reader, Handler<HttpClientResponse> responseHandler)
        throws Exception
    {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.RmbtestsResource
        StringBuilder queryParams = new StringBuilder("?");
        Buffer buffer = Buffer.buffer();
        if (reader!= null) {
            buffer.appendString(org.apache.commons.io.IOUtils.toString(reader));
        }
        io.vertx.core.http.HttpClientRequest request = httpClient.post("/rmbtests/test"+queryParams.toString());
        request.handler(responseHandler);
        request.putHeader("Content-type", "application/json");
        request.putHeader("Accept", "application/json");
        if (tenantId!= null) {
            request.putHeader("X-Okapi-Token", token);
            request.putHeader("x-okapi-tenant", tenantId);
        }
        request.putHeader("Content-Length", buffer.length()+"");
        request.setChunked(true);
        request.write(buffer);
        request.end();
    }

    /**
     * Service endpoint "/rmbtests/books"+queryParams.toString()
     * 
     */
    public void postBooks(org.folio.rest.jaxrs.model.Book Book, Handler<HttpClientResponse> responseHandler)
        throws Exception
    {
        // Auto-generated code
        // - generated by       org.folio.rest.tools.ClientGenerator
        // - generated based on org.folio.rest.jaxrs.resource.RmbtestsResource
        StringBuilder queryParams = new StringBuilder("?");
        Buffer buffer = Buffer.buffer();
        if (Book!= null) {
            buffer.appendString(org.folio.rest.tools.ClientHelpers.pojo2json(Book));
        }
        io.vertx.core.http.HttpClientRequest request = httpClient.post("/rmbtests/books"+queryParams.toString());
        request.handler(responseHandler);
        request.putHeader("Content-type", "application/json");
        request.putHeader("Accept", "application/json");
        if (tenantId!= null) {
            request.putHeader("X-Okapi-Token", token);
            request.putHeader("x-okapi-tenant", tenantId);
        }
        request.putHeader("Content-Length", buffer.length()+"");
        request.setChunked(true);
        request.write(buffer);
        request.end();
    }

}
